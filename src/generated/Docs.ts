/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/locations": {
    /**
     * Get all locations
     * @description Retrieves a list of municipalities, provinces and autonomous cities in Spain.
     */
    get: operations["getLocations"];
  };
  "/locations/reverse": {
    /**
     * Get reverse location
     * @description Retrieves a Location based on the provided latitude and longitude coordinates or IP v4 address.
     */
    get: operations["getReverseLocation"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    Location: {
      /** Format: uuid */
      id: string;
      code: string;
      name: string;
      latLng: [number, number];
      entity: string;
    };
    Municipality: {
      entity: "Municipality";
    } & Omit<components["schemas"]["Location"], "entity"> & {
        /** Format: uuid */
        municipalityId: string;
        province: {
          /** Format: uuid */
          id: string;
          code: string;
          name: string;
        };
      };
    Province: {
      entity: "Province";
    } & Omit<components["schemas"]["Location"], "entity"> & {
        /** Format: uuid */
        provinceId: string;
        capital: {
          /** Format: uuid */
          id: string;
          code: string;
          name: string;
        };
      };
    AutonomousCity: {
      entity: "AutonomousCity";
    } & Omit<components["schemas"]["Location"], "entity"> & {
        /** Format: uuid */
        autonomousCityId: string;
      };
    ListMetadata: {
      /** Format: int32 */
      skip: number;
      /** Format: int32 */
      limit: number;
      /** Format: int32 */
      total: number;
    };
    Error: {
      name: string;
      message: string;
    };
  };
  responses: {
    /** @description Internal server error */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description The request was malformed or invalid */
    BadRequestError: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description The requested resource was not found */
    NotFoundError: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    /** @description Maximum number of items to include in the API response */
    limit?: number;
    /** @description How many items should be skipped before starting to include items in the response */
    skip?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type external = Record<string, never>;

export type operations = {
  /**
   * Get all locations
   * @description Retrieves a list of municipalities, provinces and autonomous cities in Spain.
   */
  getLocations: {
    parameters: {
      query?: {
        limit?: components["parameters"]["limit"];
        skip?: components["parameters"]["skip"];
        /** @description Name or code of the location to filter the results by */
        filter?: string;
      };
    };
    responses: {
      /** @description List of all locations */
      200: {
        content: {
          "application/json": {
            metadata: components["schemas"]["ListMetadata"];
            data: (
              | components["schemas"]["Municipality"]
              | components["schemas"]["Province"]
              | components["schemas"]["AutonomousCity"]
            )[];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /**
   * Get reverse location
   * @description Retrieves a Location based on the provided latitude and longitude coordinates or IP v4 address.
   */
  getReverseLocation: {
    parameters: {
      query: {
        /** @description Type of entity or a comma-separated list of entity types to filter the response */
        entity?: string;
        /** @description IP v4 address or latitude and longitude separated by a comma to filter the results */
        filter: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json":
            | components["schemas"]["Municipality"]
            | components["schemas"]["Province"]
            | components["schemas"]["AutonomousCity"];
        };
      };
      400: components["responses"]["BadRequestError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
};
